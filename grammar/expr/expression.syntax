-- vim: set syntax=haskell:
-- best with haskell syntax highlighting

fullidentifer
   -- TODO path
   - path?
   - identifer

path
    - ("lib" ".")?
    - identifier
    - ("." identifier )*

identifer
   -- NOTE: not <keyword>
   - ([a-z][A-Z])+([a-z][A-Z][0-9])*(_([a-z][A-Z][0-9])*)*

fullexpression
    - fe0 ("and", fe0)*
    - fe2 ("or" fe2)*
    {-- ...
        ++
        +
        a - a
        *
        /

        ^   -- yeah. leave it in here. value::power has precedence
            -- this is just because identifiers in the wild may get recognized as `functioncall`
        a:a
    - fe1 (".", fe1)* -- see: discussion/dot-openrator.sol
        <expression>
    --}

expression
    / functioncall
    / value

-- TODO include string interpolation
literal
    / bool
    / int
    / float
    / string

value
    / literal
    / istring
    / fullidentifier
    / closure
    / array
    / abs
    -- tuple or parenthesis
    / tuple
    / when
    / blockexpression
    /  a^a
    -- note: NEGATE may not live here. Would confuse operator precedence
    --  -a
    /  !a
    /  âˆša
    -- Might be included. Complicates things. Hard to read for beginners
    -- / "$" fullexpression

abs
 - "|"
 - fullexpression
 - "|"

tuple
 - "("
 - fullexpression ** ","
 - ")"


array
-   "[",
-   fullexpression ** ","
-   "]",

closure
    - closureargs
    - "=>"
    - expression

closureargs
    / "(" ((identifier type) ** ",") ")"
    / identifier

-- sin 3.14
-- call "Sally" "+1489732567890" (Message from="david" text="Hello world")
-- call person="Sally" number="+012345678" message=(Message from"david" text="Hello world")
functioncall
    - fullIdentifier
    - functioncallarg*

functioncallarg
    - (identifier "=")?
    - value

